{"version":3,"sources":["components/TipSection.js","components/TipForm.js","App.js","reportWebVitals.js","index.js"],"names":["TipSection","props","billAmount","isNaN","parseFloat","toFixed","tipPercent","serviceQuality","tipAmount","isCalculated","totalAmount","className","TipForm","quality","calculateTipAndTotalBillAmount","bill","state","setState","handleChange","event","name","target","value","isValidNumber","handleSubmit","preventDefault","handleReset","showOrHide","isShowing","Container","this","Form","Group","controlId","Label","Control","type","onChange","placeholder","htmlFor","as","id","custom","Button","variant","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.de779168.chunk.js","sourcesContent":["import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nconst TipSection = (props ) => {\n    const billAmount = props.billAmount && !isNaN(props.billAmount) ? parseFloat(props.billAmount).toFixed(2) : '';\n    const tipPercent = props.serviceQuality ? props.tipPercent * 100 : '';\n    const tipAmount = !isNaN(props.tipAmount) && props.isCalculated ? props.tipAmount : '';\n    const totalAmount = !isNaN(props.totalAmount) && props.isCalculated ? props.totalAmount: '';\n\n    return (\n        <div className=\"card m-5 p-2\">\n              <p className=\"lead\">Bill Amount: <strong>${billAmount}</strong></p>\n              <p className=\"lead\">Tip Percent: <strong>{tipPercent}%</strong></p>\n              <p className=\"lead\">Tip Amount: <strong>${tipAmount}</strong></p>\n              <p className=\"lead\">Your total bill amount is: <strong>${totalAmount}</strong></p>\n        </div>\n    )\n}\n\nexport default TipSection;","import React, {Component} from 'react';\nimport {Container, Form, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n//Import components\nimport TipSection from './TipSection';\n\nexport default class TipForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            billAmount: '',\n            serviceQuality: '',\n            tipPercent: '',\n            tipAmount: '',\n            totalAmount: '',\n            isCalculated: false,\n            isValidNumber: true,\n            isShowing: true\n        };\n    }\n\n    //Function that determines tip percent based on quality\n    tipAmount = (quality) => {\n        if (quality === 'Great') {\n            return 0.25;\n        } else if (quality === 'Good') {\n            return 0.15;\n        } else if (quality === 'Okay') {\n            return 0.10;\n        } else if (quality === 'Bad') {\n            return 0.05;\n        } else {\n            return 0;\n        }\n    }\n\n    //Calculates tip and totalsAmounts\n    calculateTipAndTotalBillAmount = (serviceQuality, bill) => {\n        //Update tipPercent if serviceQuality changed\n        const tipPercent = this.state.serviceQuality !== serviceQuality ? this.tipAmount(serviceQuality) : this.state.tipPercent;\n        const billAmount = parseFloat(bill).toFixed(2);\n        const tipAmount = (tipPercent * billAmount).toFixed(2);\n        const totalAmount = (parseFloat(tipAmount) + parseFloat(billAmount)).toFixed(2);\n        this.setState({tipAmount: tipAmount, tipPercent: tipPercent, totalAmount: totalAmount, serviceQuality: serviceQuality});\n    }\n\n  handleChange = (event) => {\n      const name = event.target.name;\n      let value = event.target.value;\n\n      //Intialize isValidNumber variable with a value of true\n      let isValidNumber = true;\n    \n      //If billAmount is not a number, set isValidNumber variable to 0.\n      if (name === 'billAmount' && isNaN(event.target.value)) {\n          isValidNumber = false;\n      }\n\n      //If billAmount is invalid, update value to blank.  Use the event.target.value in all other scenarios.\n      if (name === 'billAmount' && !isValidNumber) {\n        value = '';\n      } \n      //Calculates tip percent based on service quality value\n      const tipPercent = name === 'serviceQuality' ? this.tipAmount(value) : this.state.tipPercent;\n\n      //Set state for input value and isValidNumber value.\n      this.setState({[name]: value, isValidNumber: isValidNumber, tipPercent: tipPercent});\n\n      //When bill amount is updated and serviceQuality value exists and number is valid, calculates tip amounts.  When service quality is updated and billAmount value exists and number is valid, calculates tip amounts.\n      if (this.state.billAmount !== value && name === 'billAmount' && this.state.serviceQuality && isValidNumber) {\n        this.calculateTipAndTotalBillAmount(this.state.serviceQuality, value)\n      } else if (this.state.serviceQuality !== value && name === 'serviceQuality' && this.state.billAmount && isValidNumber) {\n        this.calculateTipAndTotalBillAmount(value, this.state.billAmount);\n      } \n\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    //Only calculates tip amounts when bill amount is a valid number.\n    if (this.state.isValidNumber) {\n        this.calculateTipAndTotalBillAmount(this.state.serviceQuality, this.state.billAmount);\n        this.setState({isCalculated: true});\n    }\n  }\n\n  handleReset = () => {\n      this.setState(\n             {\n            billAmount: '',\n            serviceQuality: '',\n            tipPercent: '',\n            tipAmount: '',\n            totalAmount: '',\n            isCalculated: false,\n            isValidNumber: true\n        }\n      )\n  }\n\n  //Show or Hide form field\n  showOrHide = () => {\n      this.setState({isShowing: !this.state.isShowing})\n  }\n\n    render() {\n        \n        return (\n        <Container>\n            <h1>Tip Calculator</h1>\n            {this.state.isShowing && \n            (<Form>\n                <Form.Group controlId=\"formGroupBill\">\n                    <Form.Label>Bill Amount</Form.Label>\n                    <Form.Control\n                    type=\"number\"\n                    name='billAmount' \n                    value={this.state.billAmount} \n                    onChange={this.handleChange} \n                    placeholder=\"Enter bill amount\" />\n                </Form.Group>\n                <Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\n                How was the service?\n                </Form.Label>\n                <Form.Control\n                    as=\"select\"\n                    className=\"my-1 mr-sm-2\"\n                    id=\"inlineFormCustomSelectPref\"\n                    custom\n                    name='serviceQuality'\n                    value={this.state.serviceQuality}\n                    onChange={this.handleChange}\n                >\n                    <option value=\"\">Choose...</option>\n                    <option value=\"Great\">Great - 25%</option>\n                    <option value=\"Good\">Good - 15%</option>\n                    <option value=\"Okay\">Okay - 10%</option>\n                    <option value=\"Bad\">Bad - 5%</option>\n                    <option value=\"Horrible\">Horrible - 0%</option>\n                </Form.Control>\n            </Form>)\n            }\n            <Button className=\"mt-3\" type=\"submit\" variant={this.state.isShowing ? 'dark': 'light'} onClick={this.showOrHide}>{this.state.isShowing ? 'Hide' : 'Show'}</Button>\n\n            <TipSection billAmount={this.state.billAmount} tipPercent={this.state.tipPercent} tipAmount={this.state.tipAmount} totalAmount={this.state.totalAmount} isValidNumber={this.state.isValidNumber} isCalculated={this.state.isCalculated}  serviceQuality={this.state.serviceQuality}/>    \n            \n            <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n            Submit\n            </Button>\n            <Button className=\"mx-1\" variant=\"secondary\" type=\"submit\" onClick={this.handleReset}>\n            Reset\n            </Button>\n        </Container>\n        )\n    }\n}\n\n","import './App.css';\nimport React from 'react';\n\n//import components\nimport TipForm from './components/TipForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TipForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}