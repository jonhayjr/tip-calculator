{"version":3,"sources":["components/TipForm.js","App.js","reportWebVitals.js","index.js"],"names":["TipForm","props","tipAmount","quality","handleChange","event","name","target","value","parseFloat","state","billAmount","serviceQuality","tipPercent","totalAmount","setState","handleSubmit","preventDefault","isCalculated","handleReset","Container","Form","Group","controlId","Label","Control","type","this","onChange","placeholder","className","htmlFor","as","id","custom","toFixed","Button","variant","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.213882d5.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Container, Form, Button} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nexport default class TipForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            billAmount: '',\n            serviceQuality: '',\n            tipPercent: '',\n            tipAmount: '',\n            totalAmount: '',\n            isCalculated: false\n        };\n    }\n\n    //Function that determines tip percent based on quality\n    tipAmount = (quality) => {\n        if (quality === 'Great') {\n            return 0.25;\n        } else if (quality === 'Good') {\n            return 0.15;\n        } else if (quality === 'Okay') {\n            return 0.10;\n        } else if (quality === 'Bad') {\n            return 0.05;\n        } else {\n            return 0;\n        }\n    }\n\n  handleChange = (event) => {\n      const name = event.target.name;\n      const value = name === 'billAmount' ? parseFloat(event.target.value) : event.target.value;\n\n      if (this.state.billAmount !== value && name === 'billAmount' && this.state.serviceQuality) {\n        const tipPercent = this.tipAmount(this.state.serviceQuality);\n        const billAmount = value;\n        const tipAmount = (tipPercent * billAmount);\n        const totalAmount = tipAmount + billAmount;\n        this.setState({tipAmount: tipAmount, tipPercent: tipPercent, totalAmount: totalAmount});\n      } else if (this.state.serviceQuality !== value && name === 'serviceQuality' && this.state.billAmount) {\n        const tipPercent = this.tipAmount(value);\n        const billAmount = this.state.billAmount;\n        const tipAmount = tipPercent * billAmount;\n        const totalAmount = tipAmount + billAmount;\n     \n        this.setState({tipAmount: tipAmount, tipPercent: tipPercent, totalAmount: totalAmount});\n      } \n\n      this.setState({[name]: value});\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n      const tipPercent = this.tipAmount(this.state.serviceQuality);\n      const billAmount = this.state.billAmount;\n      const tipAmount = tipPercent * billAmount;\n      const totalAmount = tipAmount + billAmount;\n     this.setState({tipAmount: tipAmount, tipPercent: tipPercent, totalAmount: totalAmount, isCalculated: true});\n  }\n\n  handleReset = () => {\n      this.setState(\n             {\n            billAmount: '',\n            serviceQuality: '',\n            tipPercent: '',\n            tipAmount: '',\n            totalAmount: '',\n            isCalculated: false\n        }\n      )\n  }\n\n    render() {\n        return (\n        <Container>\n            <h1>Tip Calculator</h1>\n            <Form>\n            <Form.Group controlId=\"formGroupEmail\">\n                <Form.Label>Bill Amount</Form.Label>\n                <Form.Control type=\"text\" name='billAmount' value={this.state.billAmount} onChange={this.handleChange} placeholder=\"Enter bill amount\" />\n            </Form.Group>\n            <Form.Label className=\"my-1 mr-2\" htmlFor=\"inlineFormCustomSelectPref\">\n            How was the service?\n            </Form.Label>\n            <Form.Control\n                as=\"select\"\n                className=\"my-1 mr-sm-2\"\n                id=\"inlineFormCustomSelectPref\"\n                custom\n                name='serviceQuality'\n                value={this.state.serviceQuality}\n                onChange={this.handleChange}\n            >\n                <option value=\"\">Choose...</option>\n                <option value=\"Great\">Great - 25%</option>\n                <option value=\"Good\">Good - 15%</option>\n                <option value=\"Okay\">Okay - 10%</option>\n                <option value=\"Okay\">Bad - 5%</option>\n                <option value=\"Horrible\">Horrible - 0%</option>\n            </Form.Control>\n            {\n                this.state.isCalculated && this.state.billAmount && this.state.serviceQuality &&\n                (<div className=\"card m-5 p-2\">\n                  <p className=\"lead\">Bill Amount: <strong>${this.state.billAmount.toFixed(2)}</strong></p>\n                   <p className=\"lead\">Tip Percent: <strong>{this.state.tipPercent * 100}%</strong></p>\n                  <p className=\"lead\">Tip Amount: <strong>${this.state.tipAmount.toFixed(2)}</strong></p>\n                  <p className=\"lead\">Your total bill amount is: <strong>${this.state.totalAmount.toFixed(2)}</strong></p>\n                </div>)\n            }\n            <Button variant=\"primary\" type=\"submit\" onClick={this.handleSubmit}>\n            Submit\n            </Button>\n            <Button className=\"mx-1\" variant=\"secondary\" type=\"submit\" onClick={this.handleReset}>\n            Reset\n            </Button>\n            </Form>\n        </Container>\n        )\n    }\n}\n\n","import './App.css';\nimport React from 'react';\n\n//import components\nimport TipForm from './components/TipForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TipForm />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}